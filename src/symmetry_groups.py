#!/usr/bin/env python
import numpy as np
from crystallographic_calculations import axisangle2rotmat
def get_ax_ang_CSL(Sigma_CSL, Bravais_lattice):
    if Bravais_lattice == 'fcc':
        CSL_data = {'3': [60, 1, 1, 1, 'coh_twin', 3],
                    '5': [36.86, 1, 0, 0, '100', 5],
                    '7': [38.21, 1, 1, 1, '111', 7],
                    '9': [38.94, 1, 1, 0, '110', 9],
                    '11': [50.47, 1, 1, 0, '110', 11],
                    '13a': [22.26, 1, 0, 0, '100', 13],
                    '13b': [27.79, 1, 1, 1, '111', 13],
                    '15': [48.19, 2, 1, 0, '210', 15],
                    '17a': [28.07, 1, 0, 0, '100', 17],
                    '17b': [61.92, 2, 2, 1, '221', 17],
                    '19a': [26.53, 1, 1, 0, '110', 19],
                    '19b': [46.83, 1, 1, 1, '111', 19],
                    '21a': [21.78, 1, 1, 1, '111', 21],
                    '21b': [44.41, 2, 1, 1, '211', 21],
                    '23': [40.45, 3, 1, 1, '311', 23],
                    '25a': [16.26, 1, 0, 0, '100', 25],
                    '25b': [51.68, 3, 3, 1, '331', 25],
                    '27a': [31.59, 1, 1, 0, '110', 27],
                    '27b': [35.43, 2, 1, 0, '210', 27],
                    '29a': [43.6, 1, 0, 0, '100', 29],
                    '29b': [46.4, 2, 2, 1, '221', 29],
                    '31a': [17.9, 1, 1, 1, '111', 31],
                    '31b': [52.2, 2, 1, 1, '211', 31],
                    '33a': [20.05, 1, 1, 0, '110', 33],
                    '33b': [33.56, 3, 1, 1, '311', 33],
                    '33c': [58.99, 1, 1, 0, '110', 33],
                    '35a': [34.05, 2, 1, 1, '211', 35],
                    '35b': [43.23, 3, 3, 1, '331', 35],
                    '37a': [18.92, 1, 0, 0, '100', 37],
                    '37b': [43.14, 3, 1, 0, '310', 37],
                    '37c': [50.57, 1, 1, 1, '111', 37],
                    '39a': [32.2, 1, 1, 1, '111', 39],
                    '39b': [50.13, 3, 2, 1, '321', 39],
                    '41a': [12.68, 1, 0, 0, '100', 41],
                    '41b': [40.88, 2, 1, 0, '210', 41],
                    '41c': [55.88, 1, 1, 0, '110', 41],
                    '43a': [15.18, 1, 1, 1, '111', 43],
                    '43b': [27.91, 2, 1, 0, '210', 43],
                    '43c': [60.77, 3, 3, 2, '332', 43],
                    '45a': [28.62, 3, 1, 1, '311', 45],
                    '45b': [36.87, 2, 2, 1, '221', 45],
                    '45c': [53.13, 2, 2, 1, '221', 45],
                    '47a': [37.07, 3, 3, 1, '221', 47],
                    '47b': [43.66, 3, 2, 0, '320', 47],
                    '49a': [43.57, 1, 1, 1, '111', 49],
                    '49b': [43.57, 5, 1, 1, '511', 49],
                    '49c': [49.23, 3, 2, 2, '322', 49]}
    return CSL_data[Sigma_CSL]


def get_symmetry_group(crystal_sys, CSL_ax=None):
    if crystal_sys == 'Cubic':
        S1= np.matrix([[1, 0, 0],[0, 1, 0],[0, 0, 1]])
        S2= np.matrix([[-1, 0, 0],[0, 1, 0],[0, 0, -1]])
        S3= np.matrix([[-1, 0, 0],[0, -1, 0],[0, 0, 1]])
        S4= np.matrix([[1, 0, 0],[0, -1, 0],[0, 0, -1]])
        S5= np.matrix([[0, 1, 0],[0, 0, 1],[1, 0, 0]])
        S6= np.matrix([[0, -1, 0],[0, 0, 1],[-1, 0, 0]])
        S7= np.matrix([[0, -1, 0],[0, 0, -1],[1, 0, 0]])
        S8= np.matrix([[0, 1, 0],[0, 0, -1],[-1, 0, 0]])
        S9= np.matrix([[0, 0, 1],[1, 0, 0],[0, 1, 0]])
        S10= np.matrix([[0, 0, -1],[1, 0, 0],[0, -1, 0]])
        S11= np.matrix([[0, 0, -1],[-1, 0, 0],[0, 1, 0]])
        S12= np.matrix([[0, 0, 1],[-1, 0, 0],[0, -1, 0]])
        S13= np.matrix([[0, 0, -1],[0, -1, 0],[-1, 0, 0]])
        S14= np.matrix([[0, 0, 1],[0, -1, 0],[1, 0, 0]])
        S15= np.matrix([[0, 0, 1],[0, 1, 0],[-1, 0, 0]])
        S16= np.matrix([[0, 0, -1],[0, 1, 0],[1, 0, 0]])
        S17= np.matrix([[-1, 0, 0],[0, 0, -1],[0, -1, 0]])
        S18= np.matrix([[1, 0, 0],[0, 0, -1],[0, 1, 0]])
        S19= np.matrix([[1, 0, 0],[0, 0, 1],[0, -1, 0]])
        S20= np.matrix([[-1, 0, 0],[0, 0, 1],[0, 1, 0]])
        S21= np.matrix([[0, -1, 0],[-1, 0, 0],[0, 0, -1]])
        S22= np.matrix([[0, 1, 0],[-1, 0, 0],[0, 0, 1]])
        S23= np.matrix([[0, 1, 0],[1, 0, 0],[0, 0, -1]])
        S24= np.matrix([[0, -1, 0],[1, 0, 0],[0, 0, 1]])

        if CSL_ax == '100':
            return [S1, S2, S5, S6, S9, S10]
        
        if CSL_ax == '110':
            return [S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12]
        
        if CSL_ax == '111':
            return [S1, S2, S3, S4, S14, S15, S16, S17]
        
        if CSL_ax == 'coh_twin':
            return [S1, S14, S15, S16]
        
        else:
            return [S1, S2, S3, S4, S5, S6, S7, S8,
                     S9, S10, S11, S12, S13, S14, S15, S16,
                     S17, S18, S19, S20, S21, S22, S23, S24]


def get_sigma_variants_crit(Sigma_CSL, crit, crystal_sys, Bravais_lattice):
    axis_angle_CSL = get_ax_ang_CSL(Sigma_CSL, Bravais_lattice)    
    rot_mat = axisangle2rotmat(axis_angle_CSL[0], axis_angle_CSL[1:4])    
    Symmetry_group = get_symmetry_group(crystal_sys, axis_angle_CSL[4])    
    Sigma_variants = [rot_mat * x for x in Symmetry_group]    
    if crit == 'Brandon':
        Brandon_Crit = 15.0/ axis_angle_CSL[5]**0.5
    return Sigma_variants, Brandon_Crit


if __name__ == '__main__':
    CSL_data = get_ax_ang_CSL('3','fcc')
    print(CSL_data)